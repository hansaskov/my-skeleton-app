// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model UserInfo {
  id          String   @id @unique @default(cuid())
  full_name   String
  birthdate   DateTime
  description String
  user        AuthUser @relation(fields: [userId], references: [id])
  userId      String   @unique

  @@map("UserSettings")
}

model AuthUser {
  id             String             @id @unique
  email          String             @unique
  email_verified Boolean
  user_info_set  Boolean
  auth_session   AuthSession[]
  auth_key       AuthKey[]
  settings       UserInfo?
  wishlists      WishlistsOnUsers[]
  families       FamiliesOnUsers[]
  EventsOnUsers  EventsOnUsers[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Email {
  id            String   @id @unique
  subject       String
  email_address String
  date_sent     DateTime
  content       String

  @@map("email")
}

// Wishlist relations

model Wish {
  id          String   @id @unique @default(cuid())
  name        String
  price       Int
  currency    Currency
  description String
  image_url   String
  updated_at  DateTime @default(now()) @updatedAt
  wishlist    Wishlist @relation(fields: [wishlist_id], references: [id])
  wishlist_id String
}

model Wishlist {
  id        String             @id @unique @default(cuid())
  name      String
  is_public Boolean
  users     WishlistsOnUsers[]
  wishes    Wish[]
}

model WishlistsOnUsers {
  wishlist      Wishlist     @relation(fields: [wishlist_id], references: [id])
  wishlist_id   String
  user          AuthUser     @relation(fields: [user_id], references: [id])
  user_id       String
  wishlist_role WishlistRole
  updated_at    DateTime     @default(now()) @updatedAt

  @@id([wishlist_id, user_id])
}

enum Currency {
  DKK
  EUR
  USD
}

enum WishlistRole {
  EDITABLE
  INTERACTABLE
  VIEWABLE
}

// Family relations

model CaroselItem {
  id          String @id @unique @default(cuid())
  title       String
  image_url   String
  description String
  family      Family @relation(fields: [family_id], references: [id])
  family_id   String
}

model Family {
  id            String            @id @unique @default(cuid())
  name          String
  is_public     Boolean
  users         FamiliesOnUsers[]
  carosel_items CaroselItem[]
}

model FamiliesOnUsers {
  family      Family     @relation(fields: [family_id], references: [id])
  family_id   String
  user        AuthUser   @relation(fields: [user_id], references: [id])
  user_id     String
  family_role FamilyRole

  @@id([family_id, user_id])
}

enum FamilyRole {
  MODERATOR
  MEMBER
}

// Events

model Address {
  id          String  @id @unique @default(cuid())
  address     String
  postal_code Int
  city        String
  event       Event[]
}

model Event {
  id            String          @id @unique @default(cuid())
  title         String
  address       Address         @relation(fields: [address_id], references: [id])
  address_id    String
  description   String
  start_date    DateTime
  end_date      DateTime
  updated_at    DateTime        @default(now()) @updatedAt
  EventsOnUsers EventsOnUsers[]
}

model EventsOnUsers {
  event    Event    @relation(fields: [event_id], references: [id])
  event_id String
  user     AuthUser @relation(fields: [user_id], references: [id])
  user_id  String

  @@id([event_id, user_id])
}

enum EventRole {
  ORANIZER
  GUEST
}

enum AttendanceStatus {
  INVITED
  GOING
  MAYBE
  NOT_GOING
}
